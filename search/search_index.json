{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Welcome to my documentation! This is a place where I collate time-saving answers to those infrequent, yet annoying, tasks. Check out the sections with the tabs above! Once you have a tab, use the navigation menu to browse different topics!","title":"Home"},{"location":"#home","text":"Welcome to my documentation! This is a place where I collate time-saving answers to those infrequent, yet annoying, tasks. Check out the sections with the tabs above! Once you have a tab, use the navigation menu to browse different topics!","title":"Home"},{"location":"gdb/","text":"GDB Debugging tui enable enables the text-user-interface mode where you can see in with a split-window the current code location focus cmd to make arrows keys work normally in tui mode ctrl+l if tui mode messes up tab autocomplete to find options breakpoints tbreak : temporary break rbreak : match regular expression to break point locations and add for all of them crtl+x+2 : second window; cycle through ignore <breakpoint number> <occurunces> to skip over a breakpoint a certain number of times -> very useful if determinsitic program fails after a certain number of times Couple this with ignore <breakpoint number> 99999999 and after completion/crash use info break to find number of times breakpoint was hit To avoid arbitrary big number add continue to commands <breakpoint number> cond <breakpoint number> <condition> to make breakpoint conditional break foo if bar > 10 : create new conditional break point break foo thread 3 : stop at foo only in thread 3 watch foo : stop when foo is modified Can be conditions etc. like above watch -l evaluates once and then watches the resultant memory location, NOT the reevaluation of the expression rwatch is NOT regex watchpoint, but weatch point for reads to things awatch is access watchpoint (read or write, but value might not change for example) Backtrace ( bt ) is useful, but doesn't go back in time record reverse-stepi reverse-continue (e.g. to a watch point) N.B hardware watchpoints don't work with stack pointer ( set can-use-hw-watchpionts 0 to force software watch point) Hardware watch points uses special registers (use too many and you will get an unexplained crash (normally 4)) Software watch point evaluates after every step. This incurs a heavy context switching performance penalty Can alleviate this by making sure it is run locally etc. if on a remote machine whatis tells you type information Catchpoints also exist! catch catch to stop when C++ exceptions are caught catch syscall nanosleep to stop at nanosleep system call catch syscall 100 to stop at system call number 100 You can call functions too e.g. call foo() Be aware that this is what happens if you do print foo() too dprintf foo.c:10, \"bar is %d\\n\", bar allows you to dynamically add prints without recompiling! At least do this if you have to do printf debugging! set dprintf-style gdb|call|agent set dprintf-function fprintf set dprintf-channel mylog skip functions/libraries that your don't care about or trust e.g. skip -rfu ^std::.* will skip stepping into all code in the std namespace This can get a little unintutive if you use things such as callbacks or step out of a function into skipped code etc. compile code - compile code typed at console and run it compile file compile source code from a file and run it compile print use compiler to evaluate an expression, print result All can inject into the program and is very powerful. You can combine this with gdb scripting ( cat <flie.gdb> && cat > gdb ... ) You can run commands on gdb startup by using a dotfile: ~/.gdbinit Compile with -g 3 or later etc. to get better debug info (to stop \"value optimised out\" etc.) Docker compatibility To be able to use gdb in a docker container, you need to run the container with additional arguments. docker run --cap-add=SYS_PTRACE --security-opt seccomp=unconfined ... If you are using docker-compose, this can be specified like so: security_opt: - seccomp:unconfined cap_add: - SYS_PTRACE","title":"GDB Debugging"},{"location":"gdb/#gdb-debugging","text":"tui enable enables the text-user-interface mode where you can see in with a split-window the current code location focus cmd to make arrows keys work normally in tui mode ctrl+l if tui mode messes up tab autocomplete to find options breakpoints tbreak : temporary break rbreak : match regular expression to break point locations and add for all of them crtl+x+2 : second window; cycle through ignore <breakpoint number> <occurunces> to skip over a breakpoint a certain number of times -> very useful if determinsitic program fails after a certain number of times Couple this with ignore <breakpoint number> 99999999 and after completion/crash use info break to find number of times breakpoint was hit To avoid arbitrary big number add continue to commands <breakpoint number> cond <breakpoint number> <condition> to make breakpoint conditional break foo if bar > 10 : create new conditional break point break foo thread 3 : stop at foo only in thread 3 watch foo : stop when foo is modified Can be conditions etc. like above watch -l evaluates once and then watches the resultant memory location, NOT the reevaluation of the expression rwatch is NOT regex watchpoint, but weatch point for reads to things awatch is access watchpoint (read or write, but value might not change for example) Backtrace ( bt ) is useful, but doesn't go back in time record reverse-stepi reverse-continue (e.g. to a watch point) N.B hardware watchpoints don't work with stack pointer ( set can-use-hw-watchpionts 0 to force software watch point) Hardware watch points uses special registers (use too many and you will get an unexplained crash (normally 4)) Software watch point evaluates after every step. This incurs a heavy context switching performance penalty Can alleviate this by making sure it is run locally etc. if on a remote machine whatis tells you type information Catchpoints also exist! catch catch to stop when C++ exceptions are caught catch syscall nanosleep to stop at nanosleep system call catch syscall 100 to stop at system call number 100 You can call functions too e.g. call foo() Be aware that this is what happens if you do print foo() too dprintf foo.c:10, \"bar is %d\\n\", bar allows you to dynamically add prints without recompiling! At least do this if you have to do printf debugging! set dprintf-style gdb|call|agent set dprintf-function fprintf set dprintf-channel mylog skip functions/libraries that your don't care about or trust e.g. skip -rfu ^std::.* will skip stepping into all code in the std namespace This can get a little unintutive if you use things such as callbacks or step out of a function into skipped code etc. compile code - compile code typed at console and run it compile file compile source code from a file and run it compile print use compiler to evaluate an expression, print result All can inject into the program and is very powerful. You can combine this with gdb scripting ( cat <flie.gdb> && cat > gdb ... ) You can run commands on gdb startup by using a dotfile: ~/.gdbinit Compile with -g 3 or later etc. to get better debug info (to stop \"value optimised out\" etc.)","title":"GDB Debugging"},{"location":"gdb/#docker-compatibility","text":"To be able to use gdb in a docker container, you need to run the container with additional arguments. docker run --cap-add=SYS_PTRACE --security-opt seccomp=unconfined ... If you are using docker-compose, this can be specified like so: security_opt: - seccomp:unconfined cap_add: - SYS_PTRACE","title":"Docker compatibility"},{"location":"DualBoot/UbuntuWindowsSetup/","text":"Custom Linux (Ubuntu) Install - Method for Setting Up Dual Boot Usually best to install Windows first over the whole disk for a dual boot setup. Continue wizard until \"Installation type\" Select \"Something else\" (For dual boot) Shrink Windows partition to make free space. Recovery partition can be left untouched. Create the following partitions Swap partition Size: >= RAM (for hibernation) Type: Primary (can be logical if \"unstable\" issue occurs) Location: Beginning of space Use as: swap area Root filesystem - used for kernel, boot files, system files, (most) installed programs, libraries, etc. Size: >20GB, I recommend 50GB Type: Logical Location: Beginning of space Use as: ext4 fs Mount point: / Home directory - used for user files. (For dual boot systems I recommend having a common data partition so this becomes less needed) Size: Up to you. Recommended >10GB Type: Logical Location: Beginning of space Use as: ext4 fs Mount point: /home","title":"Custom Linux (Ubuntu) Install - Method for Setting Up Dual Boot"},{"location":"DualBoot/UbuntuWindowsSetup/#custom-linux-ubuntu-install-method-for-setting-up-dual-boot","text":"Usually best to install Windows first over the whole disk for a dual boot setup. Continue wizard until \"Installation type\" Select \"Something else\" (For dual boot) Shrink Windows partition to make free space. Recovery partition can be left untouched. Create the following partitions Swap partition Size: >= RAM (for hibernation) Type: Primary (can be logical if \"unstable\" issue occurs) Location: Beginning of space Use as: swap area Root filesystem - used for kernel, boot files, system files, (most) installed programs, libraries, etc. Size: >20GB, I recommend 50GB Type: Logical Location: Beginning of space Use as: ext4 fs Mount point: / Home directory - used for user files. (For dual boot systems I recommend having a common data partition so this becomes less needed) Size: Up to you. Recommended >10GB Type: Logical Location: Beginning of space Use as: ext4 fs Mount point: /home","title":"Custom Linux (Ubuntu) Install - Method for Setting Up Dual Boot"},{"location":"DualBoot/WindowsByPassingGrubMenu/","text":"Windows Booting Without GRUB Boot Menu even appearing This can sometimes happen after a Windows update; the bootloader default has been set to Windows rather than GRUB . To fix: set bootloader back to GRUB 1. Open cmd (Administrator) 2. bcdedit /set {bootmgr} path \\EFI\\ubuntu\\grubx64.efi","title":"Windows Booting Without GRUB Boot Menu even appearing"},{"location":"DualBoot/WindowsByPassingGrubMenu/#windows-booting-without-grub-boot-menu-even-appearing","text":"This can sometimes happen after a Windows update; the bootloader default has been set to Windows rather than GRUB . To fix: set bootloader back to GRUB 1. Open cmd (Administrator) 2. bcdedit /set {bootmgr} path \\EFI\\ubuntu\\grubx64.efi","title":"Windows Booting Without GRUB Boot Menu even appearing"},{"location":"Git/alias/","text":"Git Alias You can create custom git commands with git alias git config [--global] alias.co \"checkout\"","title":"Git Alias"},{"location":"Git/alias/#git-alias","text":"You can create custom git commands with git alias git config [--global] alias.co \"checkout\"","title":"Git Alias"},{"location":"Git/checkout-deprecation/","text":"The splitting/deprecation of git checkout The git checkout command has two distinct uses. One is to switch and/or create branches and the other is to restore files to a previous index. These two functions have been separated out to avoid confusion. Switch To switch branches, you should now use the following: git switch <branch> adding -c to create a new branch. Restore To restore files from a previous index, you should now use the following: git restore -s <ref> <path> This allows a new feature: restoring with patches using the -p command, similar to it's usage in git add .","title":"The splitting/deprecation of git checkout"},{"location":"Git/checkout-deprecation/#the-splittingdeprecation-of-git-checkout","text":"The git checkout command has two distinct uses. One is to switch and/or create branches and the other is to restore files to a previous index. These two functions have been separated out to avoid confusion.","title":"The splitting/deprecation of git checkout"},{"location":"Git/checkout-deprecation/#switch","text":"To switch branches, you should now use the following: git switch <branch> adding -c to create a new branch.","title":"Switch"},{"location":"Git/checkout-deprecation/#restore","text":"To restore files from a previous index, you should now use the following: git restore -s <ref> <path> This allows a new feature: restoring with patches using the -p command, similar to it's usage in git add .","title":"Restore"},{"location":"Git/diff/","text":"Diff git diff is a very powerful feature. One notable use of git diff is that it provides more options than regular diff . For example, if there is one small change within one long line, regular diff cannot highlight this for you. git diff , on the other hand, can with the --word-diff flag. Furthermore, git diff can be used outside a git repository using the --no-index flag. This allows is to function as a powerful diff replacement. git diff can also be used in patching .","title":"Diff"},{"location":"Git/diff/#diff","text":"git diff is a very powerful feature. One notable use of git diff is that it provides more options than regular diff . For example, if there is one small change within one long line, regular diff cannot highlight this for you. git diff , on the other hand, can with the --word-diff flag. Furthermore, git diff can be used outside a git repository using the --no-index flag. This allows is to function as a powerful diff replacement. git diff can also be used in patching .","title":"Diff"},{"location":"Git/dotfile/","text":"Git Dotfile Global git config is stored in $HOME/.gitconfig .","title":"Git Dotfile"},{"location":"Git/dotfile/#git-dotfile","text":"Global git config is stored in $HOME/.gitconfig .","title":"Git Dotfile"},{"location":"Git/logdog/","text":"Pretty Print Git History Graph This can be achieved with the following command: git log --decorate --oneline --graph This is sometimes referred to as \"git logdog\" and is therefore often aliased as such .","title":"Pretty Print Git History Graph"},{"location":"Git/logdog/#pretty-print-git-history-graph","text":"This can be achieved with the following command: git log --decorate --oneline --graph This is sometimes referred to as \"git logdog\" and is therefore often aliased as such .","title":"Pretty Print Git History Graph"},{"location":"Git/patch/","text":"Patch Interactive Patch Staging If you have modified a file in multiple places but want to only commit some of your changes git add has a patch option that allows you to interactively choose which parts of the file to stage. git add [<files>] -p Creating and Applying Patches Similar to unix's patch git can be used to make patches The benefit when working in a git repository is that filenames/paths are registered in git history and do not need to be specified To create a diff git diff [<files>] > mypatch.patch To apply a diff git apply mypatch.patch To revert a diff git apply -R mypatch.patch","title":"Patch"},{"location":"Git/patch/#patch","text":"","title":"Patch"},{"location":"Git/patch/#interactive-patch-staging","text":"If you have modified a file in multiple places but want to only commit some of your changes git add has a patch option that allows you to interactively choose which parts of the file to stage. git add [<files>] -p","title":"Interactive Patch Staging"},{"location":"Git/patch/#creating-and-applying-patches","text":"Similar to unix's patch git can be used to make patches The benefit when working in a git repository is that filenames/paths are registered in git history and do not need to be specified To create a diff git diff [<files>] > mypatch.patch To apply a diff git apply mypatch.patch To revert a diff git apply -R mypatch.patch","title":"Creating and Applying Patches"},{"location":"Git/pre-commit/","text":"Pre-commit The pre-commit script found in the local git repository ( .git/hooks/pre-commit) can be any executable and will run before a git commit . A useful use case is to check the formatting of code. N.B it is not best practice to modify files in the pre-commit as tempting as it might be, since you may not always want the files to change and this can be frustrating. It is better practice to abort the commit (non-zero return from pre-commit ) and warn why. If, after being warned, you want to commit anyway, pass --no-verify to git commit . Example An example pre-commit script might be the following: #!/bin/bash # Exit on any fail and prevent commit set -e for file in $(git diff --cached --name-only --diff-filter=d | grep \"\\.py$\") do black --check $file done","title":"Pre-commit"},{"location":"Git/pre-commit/#pre-commit","text":"The pre-commit script found in the local git repository ( .git/hooks/pre-commit) can be any executable and will run before a git commit . A useful use case is to check the formatting of code. N.B it is not best practice to modify files in the pre-commit as tempting as it might be, since you may not always want the files to change and this can be frustrating. It is better practice to abort the commit (non-zero return from pre-commit ) and warn why. If, after being warned, you want to commit anyway, pass --no-verify to git commit .","title":"Pre-commit"},{"location":"Git/pre-commit/#example","text":"An example pre-commit script might be the following: #!/bin/bash # Exit on any fail and prevent commit set -e for file in $(git diff --cached --name-only --diff-filter=d | grep \"\\.py$\") do black --check $file done","title":"Example"},{"location":"Git/rebase/","text":"Rebase Rebasing is a method of overwriting history by moving commits fromone place to another. Typical usage may look like git rebase main which will move the commits from the current branch onto the main branch. Onto A typical scenario is creating a branch from an existing non-default branch to continue working (whilst the base branch is in review). Once the base branch has been merged into the default branch, we want to move the new commits to a new branch off the default branch. This is achieved using the following. git rebase --onto <default_branch> <beginning_of_your_work_exclusive> <end_of_your_work_inclusive> Interactive For anything more complicated, I recommend using git rebase <new_base> -i Which can allow you to squash commits etc. Fixups To fix a previous commit and automatically rebase, you can do the following: git commit --fixup <ref> GIT_SEQUENCE_EDITOR=: git rebase -i --autosquash <ref>~1 rerere To Reuse a previous Recorded conflict Resolution automatically, enable git rerere . git config --global rerere.enabled true If you do need to resolve a conflict differently, you can use the following after the fact. git checkout --conflict=merge <path>","title":"Rebase"},{"location":"Git/rebase/#rebase","text":"Rebasing is a method of overwriting history by moving commits fromone place to another. Typical usage may look like git rebase main which will move the commits from the current branch onto the main branch.","title":"Rebase"},{"location":"Git/rebase/#onto","text":"A typical scenario is creating a branch from an existing non-default branch to continue working (whilst the base branch is in review). Once the base branch has been merged into the default branch, we want to move the new commits to a new branch off the default branch. This is achieved using the following. git rebase --onto <default_branch> <beginning_of_your_work_exclusive> <end_of_your_work_inclusive>","title":"Onto"},{"location":"Git/rebase/#interactive","text":"For anything more complicated, I recommend using git rebase <new_base> -i Which can allow you to squash commits etc.","title":"Interactive"},{"location":"Git/rebase/#fixups","text":"To fix a previous commit and automatically rebase, you can do the following: git commit --fixup <ref> GIT_SEQUENCE_EDITOR=: git rebase -i --autosquash <ref>~1","title":"Fixups"},{"location":"Git/rebase/#rerere","text":"To Reuse a previous Recorded conflict Resolution automatically, enable git rerere . git config --global rerere.enabled true If you do need to resolve a conflict differently, you can use the following after the fact. git checkout --conflict=merge <path>","title":"rerere"},{"location":"Git/root/","text":"Report Root Directory of Current Git Repo This can be achieved with the following command: git rev-parse --show-toplevel","title":"Report Root Directory of Current Git Repo"},{"location":"Git/root/#report-root-directory-of-current-git-repo","text":"This can be achieved with the following command: git rev-parse --show-toplevel","title":"Report Root Directory of Current Git Repo"},{"location":"Unix/MountingDrivesPartitions/","text":"Mounting Drives/Partitions Use gparted or gnome-disks to find (with GUI) partition name . Or use fdisk -l to do this via command line (harder to understand). N.B: devices look like /dev/sdx and partitions look like /dev/sdxY . e.g. /dev/sda and /dev/sda1 respectively. mount <parition_name> <mount_point> # ... When finished, don't forget to umount <mount_point>","title":"Mounting Drives/Partitions"},{"location":"Unix/MountingDrivesPartitions/#mounting-drivespartitions","text":"Use gparted or gnome-disks to find (with GUI) partition name . Or use fdisk -l to do this via command line (harder to understand). N.B: devices look like /dev/sdx and partitions look like /dev/sdxY . e.g. /dev/sda and /dev/sda1 respectively. mount <parition_name> <mount_point> # ... When finished, don't forget to umount <mount_point>","title":"Mounting Drives/Partitions"},{"location":"Unix/RAMDisk/","text":"RAMDisk mount -t tmpfs -o rw,size=<size> <name> <mount_point> # ... When finished, don't forget to umount <local_mount_point>","title":"RAMDisk"},{"location":"Unix/RAMDisk/#ramdisk","text":"mount -t tmpfs -o rw,size=<size> <name> <mount_point> # ... When finished, don't forget to umount <local_mount_point>","title":"RAMDisk"},{"location":"Unix/RemoteFileAccess/","text":"Remote File Access sftp Good for simple single file transfers -a flag is really useful to continue transfer if it gets interrupted sshfs Mounts the remote file system Method: bash mkdir <local_mount_point> # (usually /tmp/remote is a good choice) sshfs <user>@<remote>:<remote_mount_point> <local_mount_point> # ... When finished, don't forget to umount <local_mount_point>","title":"Remote File Access"},{"location":"Unix/RemoteFileAccess/#remote-file-access","text":"","title":"Remote File Access"},{"location":"Unix/RemoteFileAccess/#sftp","text":"Good for simple single file transfers -a flag is really useful to continue transfer if it gets interrupted","title":"sftp"},{"location":"Unix/RemoteFileAccess/#sshfs","text":"Mounts the remote file system Method: bash mkdir <local_mount_point> # (usually /tmp/remote is a good choice) sshfs <user>@<remote>:<remote_mount_point> <local_mount_point> # ... When finished, don't forget to umount <local_mount_point>","title":"sshfs"},{"location":"Unix/SSHDisplay/","text":"Graphical Applications Over SSH Pass the -X or -Y flag Need $DISPLAY environment variable. If using sudo , use sudo -E .","title":"Graphical Applications Over SSH"},{"location":"Unix/SSHDisplay/#graphical-applications-over-ssh","text":"Pass the -X or -Y flag Need $DISPLAY environment variable. If using sudo , use sudo -E .","title":"Graphical Applications Over SSH"},{"location":"Unix/SSHVPN/","text":"SSH as a VPN ssh can actually be used to tunnel network traffic also! ssh -N -L <local_port>:<remote>:<remote_port> <user>@<remote> e.g. ssh -N -L 12345:example.com:443 james@abc.com Will set up a tunnel such that example.com:443 (443 is https ) can be accessed at localhost:12345 tunnelling traffic through james@abc.com","title":"SSH as a VPN"},{"location":"Unix/SSHVPN/#ssh-as-a-vpn","text":"ssh can actually be used to tunnel network traffic also! ssh -N -L <local_port>:<remote>:<remote_port> <user>@<remote> e.g. ssh -N -L 12345:example.com:443 james@abc.com Will set up a tunnel such that example.com:443 (443 is https ) can be accessed at localhost:12345 tunnelling traffic through james@abc.com","title":"SSH as a VPN"},{"location":"Unix/compression/","text":"Compression gzip The gzip command can be used to compress single files. Add the -# replacing # with a number 1-9, for setting the compression level. pigz By default, gzip does not use all cores. This can be ammended by using the pigz command instead. pigz is fully compatible with gzip tar gzip can only compress a single file. tar (or zip - difference being inter-file compression in tar ) creates a single archive file from multiple. Combining tar and gzip is the standard way of making compressed archives. -c : Creates archive (recursive by default) -x : Extracts the archive -f : Creates archive with given filename (use - for stdout) -v : Displays verbose information -z : Compresses the tar file using gzip Examples Create a compressed archive tar cfzv archive.tar file1 file2 file3 Decompress an archive tar xfv archive.tar Create a compressed archive using all CPU cores and the best compression level tar cf - paths-to-archive | pigz -9 > archive.tar.gz","title":"Compression"},{"location":"Unix/compression/#compression","text":"","title":"Compression"},{"location":"Unix/compression/#gzip","text":"The gzip command can be used to compress single files. Add the -# replacing # with a number 1-9, for setting the compression level.","title":"gzip"},{"location":"Unix/compression/#pigz","text":"By default, gzip does not use all cores. This can be ammended by using the pigz command instead. pigz is fully compatible with gzip","title":"pigz"},{"location":"Unix/compression/#tar","text":"gzip can only compress a single file. tar (or zip - difference being inter-file compression in tar ) creates a single archive file from multiple. Combining tar and gzip is the standard way of making compressed archives. -c : Creates archive (recursive by default) -x : Extracts the archive -f : Creates archive with given filename (use - for stdout) -v : Displays verbose information -z : Compresses the tar file using gzip","title":"tar"},{"location":"Unix/compression/#examples","text":"","title":"Examples"},{"location":"Unix/compression/#create-a-compressed-archive","text":"tar cfzv archive.tar file1 file2 file3","title":"Create a compressed archive"},{"location":"Unix/compression/#decompress-an-archive","text":"tar xfv archive.tar","title":"Decompress an archive"},{"location":"Unix/compression/#create-a-compressed-archive-using-all-cpu-cores-and-the-best-compression-level","text":"tar cf - paths-to-archive | pigz -9 > archive.tar.gz","title":"Create a compressed archive using all CPU cores and the best compression level"},{"location":"Unix/gpg/","text":"Encryption Encryption can be achieved either using gpg and/or openssl . Symmetric Encryption A simple symmetric encryption can be achieved with the following: gpg -c <file> which will prompt for a passphrase and produce an encrypted file with an appended .gpg suffix. To decrypt the encrypted file use the following: gpg <encrypted_file> Encryption Algorithm gpg allows a number of algorithms. To view these algorithms run: gpg --version For symmetric encryption, look for algorithms listed under Cypher: . Using one of these algorithms can be achieved as follows. gpg --cipher-algo <ALGO> <file> No change is required to the decrypt command. Asymmetric Encryption You can see a list of keys with gpg --list-keys . --list-secret-keys and --list-public-keys are also available. Generate a key pair bash gpg --gen-key Export your public key bash gpg --export --armor <name> > <name>.pub (Optional) Make a backup of your private key. Only ever store this backup in offline media. bash gpg --export-secret-keys --armor <name> > <name>.priv Import the other's public key bash gpg --import key.pub (Optional) Trust the key bash gpg --edit-key <name> Enter trust then the level you wish to trust it to Encrypt a file bash gpg --encrypt --recipient <recipient> <file> Decrypt a received file bash gpg --decrypt <file>.gpg --output <file>","title":"Encryption"},{"location":"Unix/gpg/#encryption","text":"Encryption can be achieved either using gpg and/or openssl .","title":"Encryption"},{"location":"Unix/gpg/#symmetric-encryption","text":"A simple symmetric encryption can be achieved with the following: gpg -c <file> which will prompt for a passphrase and produce an encrypted file with an appended .gpg suffix. To decrypt the encrypted file use the following: gpg <encrypted_file>","title":"Symmetric Encryption"},{"location":"Unix/gpg/#encryption-algorithm","text":"gpg allows a number of algorithms. To view these algorithms run: gpg --version For symmetric encryption, look for algorithms listed under Cypher: . Using one of these algorithms can be achieved as follows. gpg --cipher-algo <ALGO> <file> No change is required to the decrypt command.","title":"Encryption Algorithm"},{"location":"Unix/gpg/#asymmetric-encryption","text":"You can see a list of keys with gpg --list-keys . --list-secret-keys and --list-public-keys are also available. Generate a key pair bash gpg --gen-key Export your public key bash gpg --export --armor <name> > <name>.pub (Optional) Make a backup of your private key. Only ever store this backup in offline media. bash gpg --export-secret-keys --armor <name> > <name>.priv Import the other's public key bash gpg --import key.pub (Optional) Trust the key bash gpg --edit-key <name> Enter trust then the level you wish to trust it to Encrypt a file bash gpg --encrypt --recipient <recipient> <file> Decrypt a received file bash gpg --decrypt <file>.gpg --output <file>","title":"Asymmetric Encryption"},{"location":"Unix/grep/","text":"grep grep is a well-known, useful command line utility to filter stdin. Here are some lesser-known features. Regular expressions Invoking grep with the -E flag allows you to use extended regular expressions. Matching patterns that come from a file You might be in a use case where your patterns are defined in a file and you want to use this to grep your input. This template can be (modified and) used to achieve this. grep $(sed \"s/^/-e /;s/$/ /\" patterns.txt | tr -d \"\\n\")","title":"grep"},{"location":"Unix/grep/#grep","text":"grep is a well-known, useful command line utility to filter stdin. Here are some lesser-known features.","title":"grep"},{"location":"Unix/grep/#regular-expressions","text":"Invoking grep with the -E flag allows you to use extended regular expressions.","title":"Regular expressions"},{"location":"Unix/grep/#matching-patterns-that-come-from-a-file","text":"You might be in a use case where your patterns are defined in a file and you want to use this to grep your input. This template can be (modified and) used to achieve this. grep $(sed \"s/^/-e /;s/$/ /\" patterns.txt | tr -d \"\\n\")","title":"Matching patterns that come from a file"},{"location":"Unix/patch/","text":"Patch The patch command can usefully apply patches that are created with the diff tool. For example: Generate a patch file diff foo.txt bar.txt > foo2bar.patch Apply the patch file patch foo.txt foo2bar.patch Reverse the patch patch -R foot.txt foo2bar.patch","title":"Patch"},{"location":"Unix/patch/#patch","text":"The patch command can usefully apply patches that are created with the diff tool. For example: Generate a patch file diff foo.txt bar.txt > foo2bar.patch Apply the patch file patch foo.txt foo2bar.patch Reverse the patch patch -R foot.txt foo2bar.patch","title":"Patch"},{"location":"Unix/ssl/","text":"SSL Certificates To generate an SSL certificate and private key pair, use the following command: openssl req -x509 -newkey rsa:4096 -keyout privatekey.key -out public-certificate.crt -sha256 -days 365 Add the -nodes flag to disable DES passphrase encryption -days specifies the time until expiry","title":"SSL Certificates"},{"location":"Unix/ssl/#ssl-certificates","text":"To generate an SSL certificate and private key pair, use the following command: openssl req -x509 -newkey rsa:4096 -keyout privatekey.key -out public-certificate.crt -sha256 -days 365 Add the -nodes flag to disable DES passphrase encryption -days specifies the time until expiry","title":"SSL Certificates"},{"location":"Unix/xargs/","text":"xargs xargs is a command line utility that formats stdin correctly for another program's arguments and invokes that program For example, by default the command ls outputs over a number of lines, but ls | xargs will push these onto one line (space-separated). This is very useful for substituting a command's results in another command. e.g. ls | xargs rm . N.B: this is a contrived example where rm -r * would be easier. xargs is therefore very useful for scripting, but it also becomes essential if you would otherwise have a massive number of program arguments. For example if you were deleting thousands of files (by name (contrived example)) and were to put them all onto the command line with $() , some would be cut short since there is a maximum argument limit. xargs obeys this and will split the call into multiple calls if necessary to accommodate this. This can be manually achieved with the -n <n> argument which allows only n arguments per call. This also opens up much more scripting potential.","title":"xargs"},{"location":"Unix/xargs/#xargs","text":"xargs is a command line utility that formats stdin correctly for another program's arguments and invokes that program For example, by default the command ls outputs over a number of lines, but ls | xargs will push these onto one line (space-separated). This is very useful for substituting a command's results in another command. e.g. ls | xargs rm . N.B: this is a contrived example where rm -r * would be easier. xargs is therefore very useful for scripting, but it also becomes essential if you would otherwise have a massive number of program arguments. For example if you were deleting thousands of files (by name (contrived example)) and were to put them all onto the command line with $() , some would be cut short since there is a maximum argument limit. xargs obeys this and will split the call into multiple calls if necessary to accommodate this. This can be manually achieved with the -n <n> argument which allows only n arguments per call. This also opens up much more scripting potential.","title":"xargs"},{"location":"Unix/zsh-ordering/","text":"ZSH script ordering The following scripts run in order for the setup of a zsh shell. .zshenv is always sourced .zprofile runs for login shells .zshrc only runs in interactive shells. Only include setup for interactive shells here .zlogin runs for login shells. Much like .zprofile , but the shell can be considered fully set up .zlogout runs to teardown anything set up in .zlogin Login shells A login shell is either that initially logged into or accessed with ssh . A notable exception therefore are terminal sessions launched through the terminal apps in any UI session. For my usage, I find this to be inconvenient, so I will look for and enable a setting to launch these terminal sessions as login shells.","title":"ZSH script ordering"},{"location":"Unix/zsh-ordering/#zsh-script-ordering","text":"The following scripts run in order for the setup of a zsh shell. .zshenv is always sourced .zprofile runs for login shells .zshrc only runs in interactive shells. Only include setup for interactive shells here .zlogin runs for login shells. Much like .zprofile , but the shell can be considered fully set up .zlogout runs to teardown anything set up in .zlogin","title":"ZSH script ordering"},{"location":"Unix/zsh-ordering/#login-shells","text":"A login shell is either that initially logged into or accessed with ssh . A notable exception therefore are terminal sessions launched through the terminal apps in any UI session. For my usage, I find this to be inconvenient, so I will look for and enable a setting to launch these terminal sessions as login shells.","title":"Login shells"},{"location":"Unix/Ubuntu/AutomaticMountOnBoot/","text":"To Automatically Mount Drives on Boot Use gnome-disks 1. Select partition -> Edit Mount Options 1. Turn off \"user session defaults\" 1. Select \"Mount at system startup\" 1. Fill in other fields as desired (including mount point) 1. reboot","title":"AutomaticMountOnBoot"},{"location":"Unix/Ubuntu/AutomaticMountOnBoot/#to-automatically-mount-drives-on-boot","text":"Use gnome-disks 1. Select partition -> Edit Mount Options 1. Turn off \"user session defaults\" 1. Select \"Mount at system startup\" 1. Fill in other fields as desired (including mount point) 1. reboot","title":"To Automatically Mount Drives on Boot"},{"location":"Unix/Ubuntu/InstallingAppImages/","text":"Installing *.AppImage applications Make use of https://github.com/TheAssassin/AppImageLauncher If you want to also be able to run a command from terminal, symlink the installed application (set up in AppImageLauncher) to /usr/local/bin","title":"Installing *.AppImage applications"},{"location":"Unix/Ubuntu/InstallingAppImages/#installing-appimage-applications","text":"Make use of https://github.com/TheAssassin/AppImageLauncher If you want to also be able to run a command from terminal, symlink the installed application (set up in AppImageLauncher) to /usr/local/bin","title":"Installing *.AppImage applications"},{"location":"Unix/Ubuntu/ManagingInstalls/","text":"Managing Installed Programs Find manually installed programs to find those you no longer need bash sudo apt-mark showmanual snap list # for any programs installed by snap Clean list of ppa s after uninstalling ppa s are listed in the sources.list file and as individual files in the sources.list.d/ subfolder in etc/apt","title":"Managing Installed Programs"},{"location":"Unix/Ubuntu/ManagingInstalls/#managing-installed-programs","text":"Find manually installed programs to find those you no longer need bash sudo apt-mark showmanual snap list # for any programs installed by snap Clean list of ppa s after uninstalling ppa s are listed in the sources.list file and as individual files in the sources.list.d/ subfolder in etc/apt","title":"Managing Installed Programs"},{"location":"Unix/Ubuntu/MountsInDock/","text":"To Turn On/Off Mounts from Appearing in the Dock gsettings set org.gnome.shell.extensions.dash-to-dock show-mounts <true|false>","title":"To Turn On/Off Mounts from Appearing in the Dock"},{"location":"Unix/Ubuntu/MountsInDock/#to-turn-onoff-mounts-from-appearing-in-the-dock","text":"gsettings set org.gnome.shell.extensions.dash-to-dock show-mounts <true|false>","title":"To Turn On/Off Mounts from Appearing in the Dock"},{"location":"Unix/Ubuntu/PreventSleep/","text":"Prevent/Allow Ubuntu Sleeping e.g. For an Ubuntu Server sudo systemctl <mask|unmask> sleep.target suspend.target hibernate.target hybrid-sleep.target mask to prevent sleeping, unmask to (re)allow sleeping","title":"Prevent/Allow Ubuntu Sleeping"},{"location":"Unix/Ubuntu/PreventSleep/#preventallow-ubuntu-sleeping","text":"e.g. For an Ubuntu Server sudo systemctl <mask|unmask> sleep.target suspend.target hibernate.target hybrid-sleep.target mask to prevent sleeping, unmask to (re)allow sleeping","title":"Prevent/Allow Ubuntu Sleeping"},{"location":"Unix/Ubuntu/ScreenRecording/","text":"Screen Recording I like to use Peek for screen recording.","title":"Screen Recording"},{"location":"Unix/Ubuntu/ScreenRecording/#screen-recording","text":"I like to use Peek for screen recording.","title":"Screen Recording"},{"location":"Unix/Ubuntu/TerminalClipboard/","text":"Use of the (Desktop) Clipboard in the Command Line xclip * -o : paste to stdout * Use -sel clip option to use the main clipboard. Defaults to middle-mouse-click temporary clipboard otherwise. * Very useful when combined with pipes e.g. echo \"test\" | xclip -sel clip","title":"Use of the (Desktop) Clipboard in the Command Line"},{"location":"Unix/Ubuntu/TerminalClipboard/#use-of-the-desktop-clipboard-in-the-command-line","text":"xclip * -o : paste to stdout * Use -sel clip option to use the main clipboard. Defaults to middle-mouse-click temporary clipboard otherwise. * Very useful when combined with pipes e.g. echo \"test\" | xclip -sel clip","title":"Use of the (Desktop) Clipboard in the Command Line"},{"location":"Unix/Ubuntu/UpdatingUbuntu/","text":"Updating Ubuntu GUI (recommended) Sotware Updater Terminal sudo apt update sudo apt upgrade sudo do-release-upgrade # -c to check for upgrades After the updates Some ppa s and software might have been removed GUI (recommended) Can be launched with software-properties-gtk (e.g. with ssh -X or -Y) * Remove anything from \"other software\" and \"authentication\" that has been disabled by the upgrade and make a note of which . Terminal Manipulate sources.list to remove any software that was disabled by the upgrade and make a note of which . apt update should now run without any errors or warnings Reinstall those that were removed","title":"Updating Ubuntu"},{"location":"Unix/Ubuntu/UpdatingUbuntu/#updating-ubuntu","text":"","title":"Updating Ubuntu"},{"location":"Unix/Ubuntu/UpdatingUbuntu/#gui-recommended","text":"Sotware Updater","title":"GUI (recommended)"},{"location":"Unix/Ubuntu/UpdatingUbuntu/#terminal","text":"sudo apt update sudo apt upgrade sudo do-release-upgrade # -c to check for upgrades","title":"Terminal"},{"location":"Unix/Ubuntu/UpdatingUbuntu/#after-the-updates","text":"Some ppa s and software might have been removed","title":"After the updates"},{"location":"Unix/Ubuntu/UpdatingUbuntu/#gui-recommended_1","text":"Can be launched with software-properties-gtk (e.g. with ssh -X or -Y) * Remove anything from \"other software\" and \"authentication\" that has been disabled by the upgrade and make a note of which .","title":"GUI (recommended)"},{"location":"Unix/Ubuntu/UpdatingUbuntu/#terminal_1","text":"Manipulate sources.list to remove any software that was disabled by the upgrade and make a note of which . apt update should now run without any errors or warnings Reinstall those that were removed","title":"Terminal"},{"location":"Unix/Ubuntu/VersionManagement/","text":"Managing Versions of Programs on the Path This is particularly relevant for Java (especially when wanting to work with Oracle Java), so these instructions will be tailored to that. Install version files (for java to /usr/lib/jvm/jdkx.x.x_xxx ) Register with update-alternatives bash sudo update-alternatives --install \"/usr/bin/java\" \"java\" \"/usr/lib/jvm/jdkx.x.x_xxx/bin/java\" 1 Installation to, command name, program file, priority for auto-selection (not relevant as we will use manual selection) Select which version to use bash sudo update-alternatives --config java Then type the chosen installation number N.B for java, it is best to do this process for java and javac","title":"Managing Versions of Programs on the Path"},{"location":"Unix/Ubuntu/VersionManagement/#managing-versions-of-programs-on-the-path","text":"This is particularly relevant for Java (especially when wanting to work with Oracle Java), so these instructions will be tailored to that. Install version files (for java to /usr/lib/jvm/jdkx.x.x_xxx ) Register with update-alternatives bash sudo update-alternatives --install \"/usr/bin/java\" \"java\" \"/usr/lib/jvm/jdkx.x.x_xxx/bin/java\" 1 Installation to, command name, program file, priority for auto-selection (not relevant as we will use manual selection) Select which version to use bash sudo update-alternatives --config java Then type the chosen installation number N.B for java, it is best to do this process for java and javac","title":"Managing Versions of Programs on the Path"},{"location":"Unix/tmux/StartInDetached/","text":"Starting Services in Detached Sessions tmux new -d [-s <session_name>] \"<starting_command>\"","title":"Starting Services in Detached Sessions"},{"location":"Unix/tmux/StartInDetached/#starting-services-in-detached-sessions","text":"tmux new -d [-s <session_name>] \"<starting_command>\"","title":"Starting Services in Detached Sessions"},{"location":"Windows/CommandLineAccess/","text":"Accessing the Command Line (Root Admin) shift + restart or use a Windows boot USB Troubleshoot Advanced Options Command Prompt","title":"Accessing the Command Line (Root Admin)"},{"location":"Windows/CommandLineAccess/#accessing-the-command-line-root-admin","text":"shift + restart or use a Windows boot USB Troubleshoot Advanced Options Command Prompt","title":"Accessing the Command Line (Root Admin)"},{"location":"Windows/Diskpart/","text":"Using diskpart Used for managing partitions, assigning volume letters, etc. Access on the command line: diskpart list <disk|volume|partition> select <disk|volume> <num> clean : removes all partitions (and data!) <assign|remove> letter=<letter> (with volume selected)","title":"Using diskpart"},{"location":"Windows/Diskpart/#using-diskpart","text":"Used for managing partitions, assigning volume letters, etc. Access on the command line: diskpart list <disk|volume|partition> select <disk|volume> <num> clean : removes all partitions (and data!) <assign|remove> letter=<letter> (with volume selected)","title":"Using diskpart"},{"location":"Windows/EnableDisableAdministrator/","text":"Enable/Disable Administrator Account This can be achieved with the following command: net user Administrator /active:<yes|no>","title":"Enable/Disable Administrator Account"},{"location":"Windows/EnableDisableAdministrator/#enabledisable-administrator-account","text":"This can be achieved with the following command: net user Administrator /active:<yes|no>","title":"Enable/Disable Administrator Account"},{"location":"Windows/FailToBoot/","text":"Recovering a Computer that Fails to Boot bootrec /fixmbr bootrec /fixboot bootrec /scanos bootrec /rebuildbcd Restart to check if fixed Still no fix? C: cd boot attrib bcd -s -h -r ren bcd bcd.old bootrec /rebuildbcd This can be reverted with bcdedit /import C:\\boot\\bcd.old Restart to check if fixed Still no fix? diskpart diskpart> list disk diskpart> select disk <num> # disk with os installed diskpart> list volume diskpart> select volume <num> # approx 260MB, FAT32 -> looking for EFI partition diskpart> assign letter=b cd /d b:\\EFI\\Microsoft\\Boot\\ bootrec /fixboot ren BCD BCD.old bcdboot C:\\Windows /l en-gb /s b: /f ALL Fingers crossed and reboot one last time :)","title":"Recovering a Computer that Fails to Boot"},{"location":"Windows/FailToBoot/#recovering-a-computer-that-fails-to-boot","text":"bootrec /fixmbr bootrec /fixboot bootrec /scanos bootrec /rebuildbcd Restart to check if fixed Still no fix? C: cd boot attrib bcd -s -h -r ren bcd bcd.old bootrec /rebuildbcd This can be reverted with bcdedit /import C:\\boot\\bcd.old Restart to check if fixed Still no fix? diskpart diskpart> list disk diskpart> select disk <num> # disk with os installed diskpart> list volume diskpart> select volume <num> # approx 260MB, FAT32 -> looking for EFI partition diskpart> assign letter=b cd /d b:\\EFI\\Microsoft\\Boot\\ bootrec /fixboot ren BCD BCD.old bcdboot C:\\Windows /l en-gb /s b: /f ALL Fingers crossed and reboot one last time :)","title":"Recovering a Computer that Fails to Boot"},{"location":"Windows/PasswordManagement/","text":"Password Management Change Password This can be achieved with the following: net user <username> <new_password> Enable/Disable Password This can be achieved with the following: net user <username> /passwordreq:<yes|no>","title":"Password Management"},{"location":"Windows/PasswordManagement/#password-management","text":"","title":"Password Management"},{"location":"Windows/PasswordManagement/#change-password","text":"This can be achieved with the following: net user <username> <new_password>","title":"Change Password"},{"location":"Windows/PasswordManagement/#enabledisable-password","text":"This can be achieved with the following: net user <username> /passwordreq:<yes|no>","title":"Enable/Disable Password"},{"location":"Windows/ProductKey/","text":"Get Windows Product Key For activation. Useful if computer becomes deactivated after upgrade as it finds the original key. wmic os get \"serialnumber\" # to get serial number if needed wmic path softwarelicensingservice get OA3xOriginalProductKey","title":"Get Windows Product Key"},{"location":"Windows/ProductKey/#get-windows-product-key","text":"For activation. Useful if computer becomes deactivated after upgrade as it finds the original key. wmic os get \"serialnumber\" # to get serial number if needed wmic path softwarelicensingservice get OA3xOriginalProductKey","title":"Get Windows Product Key"},{"location":"Windows/StubbornFiles/","text":"Taking ownership of stubborn files takeown /f <file>","title":"Taking ownership of stubborn files"},{"location":"Windows/StubbornFiles/#taking-ownership-of-stubborn-files","text":"takeown /f <file>","title":"Taking ownership of stubborn files"}]}